class BlockMatrix 
{
	field Array m_rows;
	field int m_height, m_width;
	
	constructor BlockMatrix new(int height, int width)
	{	
		var int rowIndex, columnIndex;
		var Array row;
		var Block block;
		
		let m_height = height;
		let m_width = width;

		// Rows
		let m_rows = Array.new(m_height);
		
		// Columns
		let rowIndex = 0;
		while (rowIndex < m_height) {
			let row = Array.new(m_width);
			let m_rows[rowIndex] = row;
			let rowIndex = rowIndex +1;
		}
		
		// Blocks
		let rowIndex = 0;
		while (rowIndex < m_height) {
			let row = m_rows[rowIndex];
			let columnIndex = 0;
			while (columnIndex < m_width)
			{
				let block = Block.new(rowIndex, columnIndex);
				let row[columnIndex] = block;
				let columnIndex = columnIndex + 1;
			}
			let rowIndex = rowIndex + 1;
		}
		
		return this;
	}
	
	method void dispose() 
	{
		var int rowIndex, columnIndex;
		var Array row;
		var Block block;
		
		// Blocks
		//let rowIndex = 0;
		//while (rowIndex < m_height) {
		//	let row = m_rows[rowIndex];
		//	let columnIndex = 0;
		//	while (columnIndex < m_width)
		//	{
		//		let block = row[columnIndex];
		//		do block.dispose();
		//		let columnIndex = columnIndex + 1;
		//	}
		//	let rowIndex = rowIndex + 1;
		//}
		
		// Columns
		let rowIndex = 0;
		while (rowIndex < m_height) 
		{
			let row = m_rows[rowIndex];
			do row.dispose();
			let rowIndex = rowIndex +1;
		}
		
		// Rows
		do m_rows.dispose();
		
        do Memory.deAlloc(this);
        return;
    }
	
	method Block GetBlock(int rowIndex, int columnIndex)
	{
		var Array row;
		var Block block;
		
		let row = m_rows[rowIndex];
		let block = row[columnIndex];
		return block;
	}
}